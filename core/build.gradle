plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.parcelize)
}

android {
    namespace "${buildVersions.namespaceBase}.core"
    compileSdk buildVersions.compileSdk

    defaultConfig {
        minSdk buildVersions.minSdk
        targetSdk buildVersions.targetSdk

        testInstrumentationRunner buildVersions.testRunner

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false

            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
        }
    }

    flavorDimensions flavors.env
    productFlavors {
        create(flavors.pre) {
            dimension = flavors.env

            buildConfigField "String", "ENDPOINT", "\"https://gateway.marvel.com/\""

            def keys = new Properties()
            file(rootProject.file("marvel_keys.properties")).withInputStream {
                keys.load(it)
            }
            buildConfigField "String", "MARVEL_PUBLIC_KEY", keys["MARVEL_PUBLIC_KEY"]
            buildConfigField "String", "MARVEL_PRIVATE_KEY", keys["MARVEL_PRIVATE_KEY"]
        }

        create(flavors.pro) {
            dimension = flavors.env

            buildConfigField "String", "ENDPOINT", "\"https://gateway.marvel.com/\""

            def keys = new Properties()
            file(rootProject.file("marvel_keys.properties")).withInputStream {
                keys.load(it)
            }
            buildConfigField "String", "MARVEL_PUBLIC_KEY", keys["MARVEL_PUBLIC_KEY"]
            buildConfigField "String", "MARVEL_PRIVATE_KEY", keys["MARVEL_PRIVATE_KEY"]
        }
    }

    compileOptions {
        sourceCompatibility buildVersions.java
        targetCompatibility buildVersions.java
    }

    kotlinOptions {
        jvmTarget = buildVersions.java
    }

    buildFeatures {
        buildConfig true
        viewBinding true
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas")
            arg("room.incremental", "true")
        }
    }
}

dependencies {
    api libs.core.ktx

    api libs.room.ktx
    api libs.room.runtime

    api libs.coil
    api libs.coil.compose

    api platform(libs.compose.bom)
    api libs.compose.activity
    api libs.compose.viewmodel

    api libs.koin.core
    api libs.koin.android
    api libs.koin.compose

    api libs.kotlinx.coroutines.android
    api libs.kotlinx.coroutines.core

    api libs.okhttp.logging.interceptor

    api libs.retrofit
    api libs.retrofit.gson

    api libs.timber

    testImplementation project(":core-testing")
    //api deps.androidx.lifecycleJava8
    //api deps.androidx.lifecycleRuntime
}
